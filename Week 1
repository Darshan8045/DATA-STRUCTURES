//SINGLY LINKED LIST

#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *next;
};
typedef struct node Node;

//FUNCTIONS
int Isempty (Node *list);
int IsLast(Node *list);
void Traverse (Node *list);
void DelRandom(Node *list, int e);
Node *FindPrev(Node *list,int e);

void InsertBeg(Node *list,int e);

//MAIN CODE
int main()
{
    Node *list=malloc(sizeof(Node));
    list->next= NULL;

    int ch,e;
    printf("1.Traversal\n2.Deletion\n");

    do
    {
        printf("Enter your choice: ");
        scanf("%d",&ch);

        switch(ch)
        {
            case 1:
            Traverse(list);
            break;

            case 2:
            printf("Enter element to be deleted: ");
            scanf("%d",&e);
            DelRandom(list,e);
            break;
           
           
            case 8:
            printf("Enter element: ");
            scanf("%d",&e);
            InsertBeg(list,e);
            break;
        }
    }while(ch<=8);
    return 0;
}

int Isempty(Node *list)
{
    if (list->next == NULL)
    return 1;
    else
    return 0;
}

void Traverse (Node *list)
{
    if(!Isempty(list))
    {
        Node *position;
        position=list;
        while(position->next!=NULL)
        {
            position=position->next;
            printf("%d\t",position->data);
        }
        printf("\n");
    }
    else
    printf("The list is Empty\n");
}

Node *FindPrev(Node *list,int e)
{
    Node *position;
    position=list;
    while(position->next!=NULL && position->next->data!=e)
    position=position->next;

    return position;
}

int IsLast(Node *position)
{
    if(position->next==NULL)
    return 1;
    else
    return 0;
}

void DelRandom (Node *list,int e)
{
    if(!Isempty(list))
    {
        Node *temp;
        Node *position;
        position=FindPrev(list,e);
        if(!IsLast(position))
        {
        temp=position->next;
        position->next=temp->next;
        printf("Deleted Element %d\n",temp->data);
        free(temp);
    }
    }
    else
    printf("The list is Empty\n");
}


void InsertBeg(Node *list,int e)
{
    Node *newnode = malloc(sizeof(Node));
    newnode->data=e;
   
    if(Isempty(list))
    newnode->next=NULL;
   
    else
    newnode->next=list->next;
   
    list->next=newnode;

}
